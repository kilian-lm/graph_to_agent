import requests
import json
import openai
import os
import requests
import logging
import datetime
import json
import random
from dotenv import load_dotenv

load_dotenv()


# class RepoAnalyzer:
#     def __init__(self, openai_api_key, url):
#         self.openai_api_key = openai_api_key
#         self.openai_base_url = url
#         self.headers = {
#             'Content-Type': 'application/json',
#             'Authorization': f'Bearer {self.openai_api_key}'
#         }
#
#     def generate_puml(self, repo):
#         data = {
#             "model": "gpt-4",
#             "messages": [
#                 {
#                     "role": "user",
#                     "content": "I need to translate the given method content into a detailed .puml by logic, so not in the style of a class diagram but in a style that a non technical person could understand whats going on. Please ensure that the diagram breaks down the content into entities, interactions, and processes, rather than summarizing it. The output should be compatible with https://plantuml.com/, meaning you will not confuse it with mermaid syntax thus you will NOT use 'participant' or NOT use 'M -> CID' or NOT use 'detach'"
#                 },
#                 {
#                     "role": "system",
#                     "content": "Understood! Please provide the detailed content of the method by logic of the method in a style that a non technical person could understand whats going on. I will not confuse it with mermaid syntax (like i will NOT use 'participant' or NOT use 'M -> CID' or NOT use 'detach') nor with any other syntax but stricly adhere to .puml syntax"
#                 },
#                 {
#                     "role": "user",
#                     "content": f"Method: {repo}"
#                 }
#             ]
#         }
#
#         response = requests.post(self.openai_base_url, headers=self.headers, json=data)
#         puml_content = response.json()["choices"][0]["message"]["content"]
#         return puml_content
#
#
#
# openai_api_key = os.getenv('OPEN_AI_KEY')
# open_ai_url = "https://api.openai.com/v1/chat/completions"
# bot = RepoAnalyzer(openai_api_key, open_ai_url)


class RepoAnalyzer:
    def __init__(self, openai_api_key, url):
        self.openai_api_key = openai_api_key
        self.openai_base_url = url
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.openai_api_key}'
        }

    def generate_puml(self, repo):
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                    "role": "user",
                    "content": "I need to translate the given method content into a detailed .puml by logic, so not in the style of a class diagram but in a style that a non technical person could understand what's going on. The output should be compatible with https://plantuml.com/, meaning you will not confuse it with mermaid syntax."
                },
                {
                    "role": "system",
                    "content": "Understood! Please provide the detailed content of the method."
                },
                {
                    "role": "user",
                    "content": f"Method: {repo}"
                }
            ]
        }

        response = requests.post(self.openai_base_url, headers=self.headers, json=data)
        puml_content = response.json()["choices"][0]["message"]["content"]
        return puml_content

    def review_and_correct_puml(self, puml_content):
        data = {
            "model": "gpt-4",
            "messages": [
                {
                    "role": "user",
                    "content": "The following is a .puml content generated by an agent. Please critically review it and correct any mistakes, especially ensuring it strictly adheres to .puml syntax and does not contain any elements from other diagramming languages like Mermaid. "
                },
                {
                    "role": "system",
                    "content": "Understood! As I'm an expert in the .puml syntax like the following: '\n@startuml\ntitle YTO Methods Logic\nskinparam Activity {\n  BackgroundColor PaleGreen\n  BorderColor DarkGreen\n}\nstart\npartition UserInteraction {\n    :Setup campaign;\n    note\n    get target values https://smart-suggester-d4o77lzj2a-ey.a.run.app\n    end note\n    :Download sdf from DV360;\n    :Upload sdf to YTO on K8s;\n}\npartition DataPreparationOnK8s {\n    :Check for Performance and Overview files on 'de-annalect-yto';\n    :When User uploads sdf,performance and sdf files become available on S3;\n    note\n    the performance file gets the suffix '_PER' and sdf gets saved as {adv.id_camp.id_date}\n    end note\n}\npartition Class1: CampaignAnalyzer {\npartition pull_file_from_s3{\n    :Initialize CampaignAnalyzer;\n    :Call clean_temp_dir();\n    :Initialize PerfFileChecker variables;\n    if (param_date is provided) then (yes)\n        :Create list of dates_to_check;\n    else (no)\n        :Use today and yesterday for dates_to_check;\n    endif\n    while (date counter < length of dates_to_check) is (true)\n        :Retrieve file from S3 based on date;\n        if (file retrieved successfully) then (yes)\n            :Store file locally;\n            :Read file into perf_df;\n            :Log successful retrieval;\n            stop\n        else (no)\n            :Log error;\n            :Increment date counter;\n        endif\n    end while\n    :Split param_sdf_path to get date_str;\n    :Construct new dates_to_check based on date_str;\n    :Reset and initialize date counter;\n}\npartition transform_model{\n:Start;\n:Method: transform_model;\nnote right: Method begins\n->Process: Overview DataFrame loading;\n    if( Exception? ) then (yes)\n    :Log the error;\n    :Publish the error message;\n    note right: Message sent to another service\n    :Raise Exception;\n    note right: Stop operation and report error\n    :End with error;\n    stop\n    else (no)\n    note right: No errors, continue\n    ->Process: sdf DataFrame loading;\n        if( Exception? ) then (yes)\n        :Log the error;\n        :Publish the error message;\n        note right: Message sent to another service\n        :Raise Exception;\n        note right: Stop operation and report error\n        :End with error;\n        stop\n        else (no)\n        :Log successful operation;\n        :End with success;\n        stop\n        endif\n    endif\n}\npartition get_last_update{\nstart\n:Checking if 'Timestamp' is not in sdf_df.columns or sdf_df['Timestamp'] is empty;\nif ('Timestamp' not in sdf_df.columns or sdf_df['Timestamp'] is empty) then (true)\n    :Set current_time as current datetime;\n    :Publish message about 'Timestamp' encountering an error;\n    :Log error about 'Timestamp' encountering an error;\n    :Setting 'Timestamp' to current_time;\nendif\n:Convert sdf_df['Timestamp'] to datetime and assign to timestamps;\n:Set sdf_df.last_update with first date of timestamps;\n:Log information about 'Timestamp' execution success;\nif (get_last_update executed without exception) then (true)\n    :Return sdf_df.last_update;\nelse (false)\n    :Log error about exception in 'get_last_update';\n    :Publish message about exception in 'get_last_update';\n    :Raise Exception with the encountered error;\nendif\n}\npartition get_analysis_time {\nstart\n:Activate Object;\nif (Is param_date None?) then (yes)\n', i will be able to distinguish the right from the wrong and correct wrong syntax. If there is any syntax unequal the example just given, i will correct it.  'Please provide the .puml content to review."
                },
                {
                    "role": "user",
                    "content": puml_content
                }
            ]
        }

        response = requests.post(self.openai_base_url, headers=self.headers, json=data)
        corrected_puml_content = response.json()["choices"][0]["message"]["content"]
        return corrected_puml_content


openai_api_key = os.getenv('OPEN_AI_KEY')
open_ai_url = "https://api.openai.com/v1/chat/completions"
bot = RepoAnalyzer(openai_api_key, open_ai_url)

method_desc = """
    def apply_rows(self, table_id, schema, rows):
        try:
            if not self._table_exists(table_id):
                self._create_table(table_id, schema)
                print(f"Inserting rows to {table_id}: {rows}")
            self._insert_rows(table_id, rows)
            self.logger.info(
                f"{self.__class__.__name__}.{self.apply_rows.__name__} {table_id} o.k")
        except Exception as e:
            error_msg = f'{self.__class__.__name__}.{self._table_exists.__name__} encountered the Error: {str(e)}'
            self.logger.error(error_msg)
            self.publisher.publish_message(error_msg)
            raise Exception(e)
"""

# for i in range(1,3):
#     print(i)
#     puml_content = bot.generate_puml(method_desc)
#     print(puml_content)


openai_api_key = os.getenv('OPEN_AI_KEY')
open_ai_url = "https://api.openai.com/v1/chat/completions"
bot = RepoAnalyzer(openai_api_key, open_ai_url)
puml_content = bot.generate_puml(method_desc)
print(puml_content)

# Review and correct the puml content

# No use to make controlling instance or i didnt uderstand yet how to correctly do it
# corrected_puml_content = bot.review_and_correct_puml(puml_content)
# print(corrected_puml_content)
